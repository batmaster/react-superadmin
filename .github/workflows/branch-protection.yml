name: Branch Protection

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  main-branch-protection:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup pnpm cache
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install

      - name: Generate Prisma Client
        run: pnpm --filter=@react-superadmin/web db:generate
        env:
          DATABASE_URL: 'postgresql://dummy:dummy@localhost:5432/dummy'

      - name: Build verification
        run: pnpm build

      - name: TypeScript strict check
        run: pnpm typecheck

      - name: Strict linting check
        run: pnpm lint:ci

      - name: Test coverage check
        run: pnpm test:coverage

      - name: Security audit
        run: pnpm audit --audit-level high

      - name: Check for vulnerabilities
        run: |
          if [ "$(pnpm audit --audit-level high --json | jq '.metadata.vulnerabilities.total')" -gt 0 ]; then
            echo "❌ High security vulnerabilities detected - blocking merge to main"
            exit 1
          fi
          echo "✅ No high security vulnerabilities found"
        shell: bash

  enforce-pull-request:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.base_ref == 'main'

    steps:
      - name: Check PR requirements
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Check if PR has description
            if (!pr.body || pr.body.trim().length < 10) {
              core.setFailed('❌ Pull request must have a meaningful description (min 10 characters)');
            }

            // Check if PR title follows conventional commits
            const conventionalCommitRegex = /^(feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+/;
            if (!conventionalCommitRegex.test(pr.title)) {
              core.setFailed('❌ Pull request title must follow conventional commit format (e.g., "feat: add new feature")');
            }

            console.log('✅ Pull request requirements met');
