#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Get current branch name
CURRENT_BRANCH=$(git branch --show-current)

echo "üß™ Running pre-commit CI tests..."
echo "Branch: $CURRENT_BRANCH"
echo "================================"

# Stricter rules for main branch
if [ "$CURRENT_BRANCH" = "main" ]; then
    echo "‚ö†Ô∏è  You're on main branch - enforcing strict CI checks!"
    echo "All tests must pass without any warnings or errors."
    echo ""
fi

# Run the local CI test script
./scripts/test-ci.sh

# Exit early if CI tests fail
if [ $? -ne 0 ]; then
    echo "‚ùå Pre-commit CI tests failed - commit blocked"
    echo "Please fix the issues above before committing"
    exit 1
fi

echo "‚úÖ Pre-commit CI tests passed"
echo ""
echo "üîç Running lint-staged formatting and linting..."
echo "================================"

# Run lint-staged for formatting and linting
npx lint-staged

# Exit early if lint-staged fails
if [ $? -ne 0 ]; then
    echo "‚ùå Lint-staged failed - commit blocked"
    echo "Please fix the formatting/linting issues above before committing"
    exit 1
fi

# Additional checks for main branch
if [ "$CURRENT_BRANCH" = "main" ]; then
    echo ""
    echo "üîí Main branch protection checks..."
    echo "================================"
    
    # Check for uncommitted changes
    if [ -n "$(git status --porcelain)" ]; then
        echo "‚ùå Uncommitted changes detected on main - commit blocked"
        echo "Main branch must be clean before committing"
        exit 1
    fi
    
    # Check if working directory is clean
    if ! git diff-index --quiet HEAD --; then
        echo "‚ùå Working directory not clean on main - commit blocked"
        echo "Please stage and commit all changes properly"
        exit 1
    fi
    
    echo "‚úÖ Main branch protection checks passed"
fi

echo "‚úÖ Pre-commit checks completed - proceeding with commit"
exit 0
