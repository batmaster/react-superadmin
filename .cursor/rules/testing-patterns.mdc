# Testing Patterns and Best Practices

## Test File Organization
- Place test files in `src/__tests__/` directories
- Mirror the source directory structure
- Use `.test.tsx` or `.spec.tsx` for component tests
- Use `.test.ts` or `.spec.ts` for utility/function tests

## Component Testing Pattern
```tsx
describe('ComponentName', () => {
  const defaultProps = {
    // Define default props
  };

  it('should render correctly', () => {
    render(<ComponentName {...defaultProps} />);
    expect(screen.getByRole('button')).toBeInTheDocument();
  });

  it('should handle user interactions', () => {
    render(<ComponentName {...defaultProps} />);
    fireEvent.click(screen.getByRole('button'));
    expect(screen.getByText('Clicked!')).toBeInTheDocument();
  });
});
```

## Hook Testing Pattern
```tsx
describe('useHookName', () => {
  it('should return initial state', () => {
    const { result } = renderHook(() => useHookName());
    expect(result.current.value).toBe(initialValue);
  });

  it('should update state when called', () => {
    const { result } = renderHook(() => useHookName());
    act(() => {
      result.current.updateValue('new value');
    });
    expect(result.current.value).toBe('new value');
  });
});
```

## Utility Testing Pattern
```tsx
describe('utilityFunction', () => {
  it('should handle normal input', () => {
    const result = utilityFunction('input');
    expect(result).toBe('expected output');
  });

  it('should handle edge cases', () => {
    const result = utilityFunction('');
    expect(result).toBe('default output');
  });
});
```

## Testing Principles
1. **Test Behavior, Not Implementation** - Focus on what the code does
2. **User-Centric Testing** - Test from the user's perspective
3. **Comprehensive Coverage** - Test all critical paths and edge cases
4. **Fast Execution** - Keep tests focused and fast
5. **Maintainable Tests** - Write tests that are easy to understand

## Common Testing Utilities
- Use `@testing-library/react` for component testing
- Use `renderHook` for hook testing
- Use `jest.fn()` for mocking functions
- Use `screen.getByRole()` for accessible element selection
- Use `fireEvent` or `userEvent` for user interactions
description:
globs:
alwaysApply: false
---
